package com.malwarebytes.filemanager.adapter;

import android.content.Context;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.BackgroundColorSpan;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.TextView;

import androidx.recyclerview.widget.RecyclerView;

import com.malwarebytes.filemanager.R;

import java.io.File;
import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;


public class FileListAdapter extends RecyclerView.Adapter<FileListAdapter.ViewHolder> implements Filterable {

    private Context context;
    private LayoutInflater mInflater;

    private ArrayList<File> fileList;
    private ArrayList<File> filteredFileList;
    private String searchText;
    private ItemClickListener mItemClickListener;
    private UpdatedList updatedList;


    @Override
    public FileListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {

        View view = mInflater.inflate(R.layout.item_list_file, parent, false);
        return new FileListAdapter.ViewHolder(view);

    }

    public FileListAdapter(Context context, ArrayList<File> fileList, ItemClickListener listener, UpdatedList updatedList) {
        this.context = context;
        this.mInflater = LayoutInflater.from(context);
        this.fileList = fileList;
        this.mItemClickListener = listener;
        this.updatedList = updatedList;
    }


    @Override
    public void onBindViewHolder(final FileListAdapter.ViewHolder holder, final int position) {

        holder.tvFileName.setText(fileList.get(position).getName().toLowerCase());

        highlightMethod(holder.tvFileName, position);
    }

    private void highlightMethod(TextView tvFileName, int position) {
        String name = fileList.get(position).getName().toLowerCase();

        if (searchText != null && searchText.length() > 0) {
            int textStart = name.indexOf(searchText);

            if (textStart >= 0) {
                // highlight found char
                Spannable highlighted = new SpannableString(name);
                while (textStart >= 0) {
                    int spanStart = Math.min(textStart, name.length());
                    int spanEnd = Math.min(textStart + searchText.length(), name.length());

                    highlighted.setSpan(new BackgroundColorSpan(context.getColor(R.color.colorHighlightText)),
                            spanStart, spanEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

                    textStart = name.indexOf(searchText, spanEnd);
                }
                tvFileName.setText(highlighted);
            }
        }
    }

    public void setHighlight(String searchText) {
        this.searchText = searchText;
        notifyDataSetChanged();
    }

    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
        @BindView(R.id.tvFileName)
        TextView tvFileName;

        ViewHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);

            tvFileName.setOnClickListener(this);

        }

        @Override
        public void onClick(View view) {
            if (view.getId() == R.id.tvFileName) {
                if (mItemClickListener != null) {
                    mItemClickListener.onItemClick(getAdapterPosition());
                }
            }
        }
    }

    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence charSequence) {
                final FilterResults filterResults = new FilterResults();
                final ArrayList<File> fileArrayList = new ArrayList<File>();
                if (filteredFileList == null)
                    filteredFileList = fileList;
                if (charSequence != null) {
                    if (filteredFileList != null & filteredFileList.size() > 0) {
                        for (final File file : filteredFileList) {
                            if (file.getName().toLowerCase().contains(charSequence.toString())) {
                                fileArrayList.add(file);
                            }
                        }
                    }
                    filterResults.values = fileArrayList;
                }
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                fileList = (ArrayList<File>) results.values;
                updatedList.getUpdatedFile(fileList);
                notifyDataSetChanged();

            }
        };
    }

    public interface ItemClickListener {
        void onItemClick(int position);
    }

    public interface UpdatedList {
        void getUpdatedFile(ArrayList<File> fileArrayList);
    }

    @Override
    public int getItemCount() {
        return fileList.size();
    }
}
