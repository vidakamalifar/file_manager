package com.malwarebytes.filemanager.presenter;

import android.content.ContentResolver;
import android.net.Uri;
import android.os.Environment;
import android.os.ParcelFileDescriptor;
import android.text.TextUtils;
import android.util.Log;

import com.malwarebytes.filemanager.TestModel;
import com.malwarebytes.filemanager.interfaces.FileManagerPresenter;
import com.malwarebytes.filemanager.interfaces.ViewFileManagerInterface;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class FileManagerImpPresenter implements FileManagerPresenter {

    private ViewFileManagerInterface viewFileManagerInterface;
    private ArrayList<File> myList;
    private ArrayList<File> updateFileArrayList;

    public FileManagerImpPresenter(ViewFileManagerInterface mViewFileManagerInterface) {
        this.viewFileManagerInterface = mViewFileManagerInterface;
    }

    @Override
    public void search(String txtSearch) {
        if (TextUtils.isEmpty(txtSearch)) {
            viewFileManagerInterface.showSearchTextIsEmpty();

        } else {
            viewFileManagerInterface.showHighlight(txtSearch);
            viewFileManagerInterface.showSearchResult(txtSearch);
        }
    }

    @Override
    public void sortNameASC() {
        Collections.sort(myList, File::compareTo);
        viewFileManagerInterface.showSortName();
    }

    @Override
    public void sortNameDSC() {
        Collections.sort(myList, (d1, d2) -> d2.compareTo(d1));
        viewFileManagerInterface.showSortName();
    }

    @Override
    public void sortChronologicallyASC() {
        Collections.sort(myList, Comparator.comparingLong(File::lastModified));
        viewFileManagerInterface.showSortChronologically();
    }

    @Override
    public void sortChronologicallyDSC() {
        Collections.sort(myList, Comparator.comparingLong(File::lastModified).reversed());
        viewFileManagerInterface.showSortChronologically();
    }


    @Override
    public void sortExtensionASC() {
        Collections.sort(myList, (f1, f2) -> {
            String p1 = f1.getName();
            String p2 = f2.getName();

            String[] ex1;
            String[] ex2;

            ex1 = p1.split("\\.");
            ex2 = p2.split("\\.");
            int result = ex1[ex1.length - 1].compareTo(ex2[ex2.length - 1]);
            viewFileManagerInterface.showSortExtension();

            return result;
        });

    }

    @Override
    public void sortExtensionDSC() {
        Collections.sort(myList, (f1, f2) -> {
            String p1 = f1.getPath();
            String p2 = f2.getPath();

            String[] ex1;
            String[] ex2;

            ex1 = p1.split("\\.");
            ex2 = p2.split("\\.");

            int result = ex1[ex1.length - 1].compareTo(ex2[ex2.length - 1]);
            viewFileManagerInterface.showSortExtension();
            return result;
        });
    }

    @Override
    public void getFileList() {
        File dir = new File(Environment.getExternalStorageDirectory().getPath() + "/Download");
        if (dir.exists()) {
            viewFileManagerInterface.showFileList(dir);
        }
    }

    @Override
    public void writeFileContent(Uri uri, ContentResolver resolver) {
        ParcelFileDescriptor parcelFileDescriptor = null;
        try {
            if (uri != null)
                parcelFileDescriptor = resolver.openFileDescriptor(uri, "w");

            if (parcelFileDescriptor != null) {
                FileOutputStream fileOutputStream = null;
                fileOutputStream = new FileOutputStream(
                        parcelFileDescriptor.getFileDescriptor());

                OutputStreamWriter myOutWriter = new OutputStreamWriter(fileOutputStream);


                if (updateFileArrayList != null && updateFileArrayList.size() > 0) {
                    for (int i = 0; i < updateFileArrayList.size(); i++) {
                        myOutWriter.write(updateFileArrayList.get(i).getName() + "\n");
                    }
                } else {
                    for (int i = 0; i < myList.size(); i++) {
                        myOutWriter.write(myList.get(i).getName() + "\n");
                    }
                }
                myOutWriter.close();
                fileOutputStream.flush();
                fileOutputStream.close();
                parcelFileDescriptor.close();
                viewFileManagerInterface.showDownloadListSuccessFull();
            }
        } catch (IOException e) {
            e.printStackTrace();
            viewFileManagerInterface.showDownloadListFailed();

        }
    }

    @Override
    public void processDirectory(File dir) {
        if (dir.listFiles() != null && dir.listFiles().length > 0)
            for (int i = 0; i < dir.listFiles().length; i++) {
                if (dir.listFiles()[i].isDirectory()) {
                    processDirectory(dir.listFiles()[i]);
                } else if (dir.listFiles()[i].isFile()) {
                    myList.add(dir.listFiles()[i]);
                    Log.e("TAG", "processDirectory: " + myList.size());
                }
            }
    }

    @Override
    public void initData(ArrayList<File> myList, ArrayList<File> updateFileArrayList) {
        this.myList = myList;
        this.updateFileArrayList = updateFileArrayList;
    }

    @Override
    public void updateFileResultList(ArrayList<File> updateResultFileArrayList) {
        if (updateFileArrayList.size() > 0) {
            viewFileManagerInterface.showSearchResultText();
        } else {
            viewFileManagerInterface.hideSearchResultText();
        }
    }

    ArrayList<TestModel> listTestModel = new ArrayList<>();
    public ArrayList<TestModel> mockSortACS() {
        TestModel testModel;
        String[] mockList = {"vida", "malwarebytes", "milan", "estonia"};

        for (String s : mockList) {
            testModel = new TestModel(s);
            listTestModel.add(testModel);
        }
        Collections.sort(listTestModel, TestModel::compareTo);

        return listTestModel;
    }
}
