package com.malwarebytes.filemanager.view;


import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentResolver;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.malwarebytes.filemanager.R;
import com.malwarebytes.filemanager.adapter.FileListAdapter;
import com.malwarebytes.filemanager.interfaces.FileManagerPresenter;
import com.malwarebytes.filemanager.interfaces.ViewFileManagerInterface;
import com.malwarebytes.filemanager.presenter.FileManagerImpPresenter;
import com.malwarebytes.filemanager.utils.FileDetailDialog;
import com.malwarebytes.filemanager.utils.PermissionUtils;
import com.malwarebytes.filemanager.utils.SortDialog;

import java.io.File;
import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;

public class MainActivity extends AppCompatActivity implements View.OnClickListener, FileListAdapter.ItemClickListener,
        FileListAdapter.UpdatedList, ViewFileManagerInterface {

    public static final String TAG = "MainActivity";

    private static final int PERMISSION_REQUEST_CODE = 100;
    private static int CREATE_FILE_REQUEST_CODE = 1;

    public static final String ALPHABETICALLY = "Alphabetically ";
    public static final String CHRONOLOGICALLY = "Chronologically ";
    public static final String EXTENSION = "Extension ";


    @BindView(R.id.tvFileResult)
    TextView tvFileResult;
    @BindView(R.id.recyclerView)
    RecyclerView recyclerView;
    @BindView(R.id.bSave)
    Button bSave;

    private ProgressDialog progressBar;
    private ArrayList<File> myList;
    private FileListAdapter fileListAdapter;
    private ArrayList<File> updateFileArrayList = new ArrayList<>();
    private FileManagerPresenter fileManagerPresenter;
    private PermissionUtils permissionUtils;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        ButterKnife.bind(this);

        //presenter initial
        fileManagerPresenter = new FileManagerImpPresenter(MainActivity.this);

        //permissionUtils initial
        permissionUtils = new PermissionUtils(this);


        if (myList == null)
            myList = new ArrayList<>();

        setAdapter();

        loadDirectoryFile();

        bSave.setOnClickListener(this);
    }

    private void setAdapter() {
        //configuring recycler view
        fileListAdapter = new FileListAdapter(MainActivity.this, myList, this, this);
        recyclerView.setLayoutManager(new LinearLayoutManager(MainActivity.this));

        //setting adapter to recycler view
        recyclerView.setAdapter(fileListAdapter);

        fileManagerPresenter.initData(myList, updateFileArrayList);

    }

    private void loadDirectoryFile() {
        String state = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(state)) {
            if (permissionUtils.checkPermission()) {
                fileManagerPresenter.getFileList();
            } else {
                // Getting storage permission
                permissionUtils.isReadStoragePermissionGranted();
            }
        }
    }

    private void openSortDialog() {
        new SortDialog(this, (isAscending, sortType) -> {

            if (sortType.equals(ALPHABETICALLY) && isAscending) {
                fileManagerPresenter.sortNameASC();

            } else if (sortType.equals(ALPHABETICALLY) && !isAscending) {
                fileManagerPresenter.sortNameDSC();

            } else if (sortType.equals(CHRONOLOGICALLY) && isAscending) {
                fileManagerPresenter.sortChronologicallyASC();

            } else if (sortType.equals(CHRONOLOGICALLY) && !isAscending) {
                fileManagerPresenter.sortChronologicallyDSC();

            } else if (sortType.equals(EXTENSION) && isAscending) {
                fileManagerPresenter.sortExtensionASC();

            } else if (sortType.equals(EXTENSION) && !isAscending) {
                fileManagerPresenter.sortExtensionDSC();
            }
        }).show();
    }

    @Override
    public void onClick(View view) {
        if (view.getId() == R.id.bSave) {
            createFile();
        }
    }

    private void createFile() {
        Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("text/plain");
        intent.putExtra(Intent.EXTRA_TITLE, "myFile.txt");
        startActivityForResult(intent, CREATE_FILE_REQUEST_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == CREATE_FILE_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
            if (data != null) {
                ContentResolver resolver = getContentResolver();
                fileManagerPresenter.writeFileContent(data.getData(), resolver);
            }
        }
    }

    @Override
    public void onItemClick(int position) {
        new FileDetailDialog(this, myList.get(position)).show();
    }

    @Override
    public void getUpdatedFile(ArrayList<File> files) {
        updateFileArrayList.clear();
        updateFileArrayList.addAll(files);
        fileManagerPresenter.updateFileResultList(files);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; We can access to searchView
        getMenuInflater().inflate(R.menu.menu, menu);
        MenuItem menuItemSearch = menu.findItem(R.id.app_bar_search);
        SearchView searchView = (SearchView) menuItemSearch.getActionView();

        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                searchView.clearFocus();
                fileManagerPresenter.search(query);
                return false;
            }

            @Override
            public boolean onQueryTextChange(String query) {
                fileManagerPresenter.search(query);
                return true;
            }
        });

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        //sort icon in the menu
        if (item.getItemId() == R.id.app_bar_sort) {
            openSortDialog();
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void showHighlight(String txtSearch) {
        fileListAdapter.setHighlight(txtSearch);
    }

    @Override
    public void showSearchResult(String txtSearch) {
        tvFileResult.setVisibility(View.VISIBLE);
        fileListAdapter.getFilter().filter(txtSearch);
    }

    @Override
    public void showSearchTextIsEmpty() {
        tvFileResult.setVisibility(View.GONE);
        fileListAdapter.getFilter().filter("");
        fileListAdapter.setHighlight("");

    }

    @Override
    public void showFileList(File dir) {
        fileManagerPresenter.processDirectory(dir);
        fileListAdapter.notifyDataSetChanged();
    }

    @Override
    public void showDownloadListSuccessFull() {
        Toast.makeText(MainActivity.this, R.string.download_successfully, Toast.LENGTH_SHORT).show();
    }

    @Override
    public void showDownloadListFailed() {
        Toast.makeText(MainActivity.this, R.string.download_failed, Toast.LENGTH_SHORT).show();
    }

    @Override
    public void showSearchResultText() {
        if (updateFileArrayList.size() == 1) {
            tvFileResult.setText(updateFileArrayList.size() + getString(R.string.result));
        } else if (updateFileArrayList.size() > 1) {
            tvFileResult.setText(updateFileArrayList.size() + getString(R.string.results));
        }
    }

    @Override
    public void hideSearchResultText() {
        tvFileResult.setVisibility(View.GONE);
    }

    @Override
    public void showSortResult() {
        fileListAdapter.notifyDataSetChanged();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                //resume tasks needing this permission
                loadDirectoryFile();
                bSave.setEnabled(true);

            } else {
                bSave.setEnabled(false);
                Toast.makeText(MainActivity.this, R.string.permission_denied, Toast.LENGTH_SHORT).show();
            }
        }
    }
}

